proteins_of_interest <- c("PTK2", "PIK3CA", "PIK3CB", "PIK3R1", "PIK3R2", "PDPK1;PDPK2P",
"PTEN", "AKT1", "AKT2", "RAB3IP", "RAB8A", "RAB8B",
"TBC1D4", "TBC1D20", "TBC1D17", "PPP2CA", "PPP2CA;PPP2CB")
data_filtered <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene","conc_nM","copy_number","quant_accuracy","unique_peptides"))) |>
mutate(conc_0.1pl = 10^21 * copy_number/(0.1*N_A)) |>
mutate(conc_0.5pl = 10^21 * copy_number/(0.5*N_A)) |>
mutate(conc_1pl = 10^21 * copy_number/(N_A)) |>
mutate(conc_5pl = 10^21 * copy_number/(5*N_A)) |>
mutate(conc_10pl = 10^21 * copy_number/(10*N_A))
# proteins of interest
# PTK2: gene name for focal adhesion kinase 1
# PI3K: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3937771/ suggests Class I type for PI(4,5)P2 to PI(3,4,5)P3. For class I, subunits of interest are PIK3C{A,B,D,G}, PIK3R{1,2,3,5,6}
# dataset only has PIK3CA, PIK3CB, PIK3R1, and PIK3R2
# PDPK1: 3-phosphoinositide-dependent protein kinase 1 (as PDPK1;PDPK2P in gene name column)
# (PDPK1 also has alias name PDK1: not to be confused with [Pyruvate dehydrogenase (acetyl-transferring)] kinase isozyme 1)
# Another name for Rabin8: RAB3IP
# Akt1 or Akt2 or both: mostly like just add them up to get Akt
# Maybe just go ahead with Rab8A, considering the following line in NCB paper
# "Short hairpin RNAs (shRNAs) for human Rab8a (target sequence: AACAAGT- GTGATGTGAATGAC)"
# Rab8 GAP: TBC1D4, TBC1D20, TBC1D17
# PPP2CA: Akt Phosphatase PP2A
proteins_of_interest <- c("PTK2", "PIK3CA", "PIK3CB", "PIK3R1", "PIK3R2", "PDPK1;PDPK2P",
"PTEN", "AKT1", "AKT2", "RAB3IP", "RAB8A", "RAB8B",
"TBC1D4", "TBC1D20", "TBC1D17", "PPP2CA", "PPP2CA;PPP2CB")
data_filtered <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene","conc_nM","copy_number","quant_accuracy","unique_peptides"))) |>
mutate(conc_0.1pl = 10^21 * copy_number/(0.1*N_A)) |>
mutate(conc_0.5pl = 10^21 * copy_number/(0.5*N_A)) |>
mutate(conc_1pl = 10^21 * copy_number/(N_A)) |>
mutate(conc_5pl = 10^21 * copy_number/(5*N_A)) |>
mutate(conc_10pl = 10^21 * copy_number/(10*N_A))
# keeping only the proteins of interest, and copy_number and amount_pg_per_cell columns
# output data[[1]] using kable
temp <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene", "copy_number", "amount_pg_per_cell")))
# load excel file with specific sheet named "proteinGroups" and don't show warnings
data_other_cell_lines <- readxl::read_excel("proteome_ruler_paper_SuppTab2.xlsx",
sheet = "proteinGroups") |>
as_tibble()
# keep only the columns with subscript "Copy number" or "Gene names" in their name
cols_to_keep <- grep("Copy number|Gene names", colnames(data_other_cell_lines), value = TRUE)
data_other_cell_lines <- data_other_cell_lines |>
select(all_of(cols_to_keep))
# remove substring "Copy number" from column names that have it
colnames(data_other_cell_lines)[1:12] <- gsub("Copy number ", "",
colnames(data_other_cell_lines)[1:12])
colnames(data_other_cell_lines)[13] <- "gene"
# keep only the proteins of interest
data_other_cell_lines <- data_other_cell_lines |>
filter(gene %in% proteins_of_interest) |>
column_to_rownames(var = "gene") |>
# mutate all the columns to numeric
mutate(across(everything(), as.numeric)) |>
# mutate all columns by dividing by N_A
# assuming 1pL cell volume and converting to nM
mutate(across(everything(), ~ ./(N_A*1e-21))) |>
rownames_to_column(var = "gene")
View(data_other_cell_lines)
View(data_filtered)
# load excel file with specific sheet named "proteinGroups" and don't show warnings
data_other_cell_lines <- readxl::read_excel("proteome_ruler_paper_SuppTab2.xlsx",
sheet = "proteinGroups") |>
as_tibble()
View(data_other_cell_lines)
View(data[[1]])
View(data_filtered)
package_version("TIDYVERSE")
package_version("tidyverse")
packageVersion("tidyverse")
?packageVersion
packageVersion("foreach","doParallel")
packageVersion("foreach")
packageVersion("doParallel")
packageVersion("RColorBrewer")
packageVersion("ComplexHeatmap")
packageVersion("circlize")
packageVersion("ggsignif")
packageVersion("cowplot")
packageVersion("ConsensusClusterPlus")
packageVersion("fpc")
?density
?logit
library(pracma)
?logit
packageVersion("pracma")
?ecdfdist
library(maotai)
?ecdfdist
packageVersion("maotai")
?fsdist
?ksdist
library(geostats)
?ksdist
packageVersion("geostats")
packageVersion("corrplot")
packageVersion("Hmisc")
packageVersion("kableExtra")
packageVersion("patchwork")
packageVersion("plotrix")
version()
version
gc()
# load packages -------
suppressPackageStartupMessages({
library(tidyverse)
library(flextable)
})
# set working directory same as the current script location -------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load cell line data ------
cell_lines = read.csv("../cell_line_label_colors.csv",
stringsAsFactors = FALSE
) |>
select(tissue, label)
colnames(cell_lines) = c("Tissue", "Cell Line")
flextable(cell_lines) %>%
merge_v(j="Tissue") %>%
theme_box() %>%
align(j = 1, align = "center")
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
merge_v(j = "Tissue")
merge_v()
?merge_v()
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
merge_v(j = "Tissue") |>
theme_default()
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
merge_v(j = "Tissue") |>
theme_box()
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
# increase width of second column
set_table_properties(layout = "autofit") |>
theme_box()
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
set_header_df(mapping = data.frame(
label = c("Tissue", "Cell Line"),
align = c("center", "center")
)) |>
theme_box()
?flextable::align
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = "center", part = "all") |>
theme_box()
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
theme_box()
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all")
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all")
# plot cell line tables using flextable ---------
cell_lines |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header")
# plot cell line tables using flextable ---------
cell_lines |>
filter(Tissue %in% c("Skin", "Prostate", "Pancreas", "Ovary")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header")
# print tissue names in alphabetical order
cell_lines |> arrange(Tissue) |> pull(Tissue)
# print tissue names in alphabetical order
unique(cell_lines |> arrange(Tissue) |> pull(Tissue))
# load cell line data ------
cell_lines = read.csv("../cell_line_label_colors.csv",
stringsAsFactors = FALSE
) |>
select(tissue, label)
colnames(cell_lines) = c("Tissue", "Cell Line")
# load packages -------
suppressPackageStartupMessages({
library(tidyverse)
library(flextable)
})
# set working directory same as the current script location -------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load cell line data ------
cell_lines = read.csv("../cell_line_label_colors.csv",
stringsAsFactors = FALSE
) |>
select(tissue, label)
colnames(cell_lines) = c("Tissue", "Cell Line")
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate", "Pancreas", "Ovary")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header")
save_as_image(tab1, "temp.png", res = 300)
?save_as_image
?set_table_properties
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate", "Pancreas", "Ovary")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 8, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all")
save_as_image(tab1, "temp.png", res = 300)
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 8, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all")
save_as_image(tab1, "cell_lines_table1.png", res = 300)
tab2 = cell_lines |>
filter(Tissue %in% c("Pancreas", "Ovary", "Lung")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 8, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all")
save_as_image(tab2, "cell_lines_table2.png", res = 300)
tab3 = cell_lines |>
filter(Tissue %in% c("Colon", "Breast", "Brain")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 8, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all")
save_as_image(tab3, "cell_lines_table3.png", res = 300)
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 7, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all")
save_as_image(tab1, "cell_lines_table1.png", res = 300)
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# "autofit" layout to fit the content
set_table_properties(layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 6, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all")
save_as_image(tab1, "cell_lines_table1.png", res = 300)
cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# reduce width of column Tissue
set_table_properties(width = 0.5, layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 6, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all")
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# reduce width of column Tissue
set_table_properties(width = 0.5, layout = "autofit") |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 6, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all")
save_as_image(tab1, "cell_lines_table1.png", res = 300)
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 6, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all")
save_as_image(tab1, "cell_lines_table1.png", res = 300)
?set_table_properties
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 6, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all") |>
# set border color
border(j = c("Tissue", "Cell Line"), border = fp_border(color = "black", width = 1), part = "all") |>
# reduce width of first column
width(j = "Tissue", width = 3, unit = "mm")
?border
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 6, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all") |>
# set border color
border(j = c("Tissue", "Cell Line"), border = fp_border(color = "black"), part = "all") |>
# reduce width of first column
width(j = "Tissue", width = 3, unit = "mm")
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 6, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all") |>
# set border color
border(j = c("Tissue", "Cell Line"), border = fp_border(color = "black"), part = "all") |>
# reduce width of first column
width(j = "Tissue", width = 3, unit = "mm")
install.packages("officer")
# load packages -------
suppressPackageStartupMessages({
library(tidyverse)
library(flextable)
library(officer)
})
# set working directory same as the current script location -------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load cell line data -------
cell_lines = read.csv("../cell_line_label_colors.csv",
stringsAsFactors = FALSE
) |>
select(tissue, label)
colnames(cell_lines) = c("Tissue", "Cell Line")
# plot cell line tables using flextable ---------
tab1 = cell_lines |>
filter(Tissue %in% c("Skin", "Prostate")) |>
flextable() |>
# merge cells in the first column corresponding to same tissue
merge_v(j = "Tissue") |>
theme_box() |>
# center align for all columns
align(j = c("Tissue", "Cell Line"), align = c("center", "center"), part = "all") |>
# remove bold from header
bold(j = c("Tissue", "Cell Line"), bold = FALSE, part = "header") |>
# set font size
fontsize(j = c("Tissue", "Cell Line"), size = 6, part = "all") |>
# set background color
bg(j = c("Tissue", "Cell Line"), bg = "white", part = "all") |>
# set border color
border(j = c("Tissue", "Cell Line"), border = fp_border(color = "black"), part = "all") |>
# set width of columns
width(j = c("Tissue", "Cell Line"), width = c(15, 20), unit = "mm")
save_as_image(tab1, "cell_lines_table1.png", res = 300)
