colnames(data_other_cell_lines)[1:12])
colnames(data_other_cell_lines)[13] <- "gene"
# keep only the proteins of interest
data_other_cell_lines <- data_other_cell_lines |>
filter(gene %in% proteins_of_interest) |>
column_to_rownames(var = "gene") |>
# mutate all the columns to numeric
mutate(across(everything(), as.numeric)) |>
# mutate all columns by dividing by N_A
# assuming 1pL cell volume and converting to nM
mutate(across(everything(), ~ ./(N_A*1e-21))) |>
rownames_to_column(var = "gene")
compare_cell_lines <- data_filtered |>
select(all_of(c("gene", "conc_1pl"))) |>
inner_join(data_other_cell_lines, by = "gene") |>
# round off all the numerics to 2 decimal places
mutate(across(where(is.numeric), ~ round(., 2)))
View(compare_cell_lines)
X = matrix(0, 100, 2)
X[,1] = rep(1, 100)
sep(0, 1, 100)
X[,2] = seq(0,1, 100)
P = X * solve(X^T * X) * X^T
P = X %*% solve(X^T %*% X) %*% X^T
P = X %*% solve(t(X) %*% X) %*% t(X)
X
seq(0,1, 100)
?seq
X[,2] = seq(0,1, length.out = 100)
X
P = X %*% solve(t(X) %*% X) %*% t(X)
eigen(P)
X = matrix(0, 10, 2)
X[,1] = rep(1, 100)
X[,1] = rep(1, 10)
X[,2] = seq(0,1, length.out = 10)
P = X %*% solve(t(X) %*% X) %*% t(X)
eigen(P)
values, vectors <- eigen(P)
[values, vectors] <- eigen(P)
temp <- eigen(P)
temp['values']
D <- diag(temp$values)
View(D)
Q = cind(temp$vectors)
Q = cbind(temp$vectors)
(P == Q %*% D %*% t(Q))
View(Q)
temp$vectors[1]
temp$vectors
Q = temp$vectors
P %*% Q[,1]
P %*% Q[,3]
Q %*% t(Q)
view(round(Q %*% t(Q), 1))
View(round(Q %*% t(Q), 1))
View(round(t(Q) %*% Q, 1))
View(round(Q[,c(1,2)] %*% t(Q[,c(1,2)]), 1))
Q[,1:2]
View(round(Q[,1:2] %*% t(Q[,1:2]), 1))
View(round(t(Q[,1:2]) %*% Q[,1:2], 1))
?p.adjust
suppressPackageStartupMessages({
library(tidyverse)
library(cowplot)
})
######################################################################
# Part (a)
######################################################################
# numeric, numeric, numeric -> vector
# produces Wald-based level-alpha confidence interval for exp(beta1) given y1 and y2
get_ci_wald <- function(y1, y2, alpha) {
# check for edge case of y1 = 0 or y2 = 0
if (y1 == 0 | y2 == 0) {
return(as.vector(c(-Inf, Inf)))
}
z_alpha <- qnorm(1 - alpha / 2)
ci <- c(
(y2 / y1) * exp(-z_alpha * sqrt(1 / y1 + 1 / y2)),
(y2 / y1) * exp(z_alpha * sqrt(1 / y1 + 1 / y2))
)
return(as.vector(ci))
}
# numeric, numeric, numeric -> vector
# produces likelihood ratio test-based level-alpha confidence interval for
# exp(beta1) given y1 and y2
get_ci_lrt <- function(y1, y2, alpha) {
# check for edge case of y1 = 0 or y2 = 0
if (y1 == 0 | y2 == 0) {
return(as.vector(c(-Inf, Inf)))
}
# grid of values for exp(beta1)
expbeta1_grid <- seq(0.001, 10, by = 0.001)
rhs <- qchisq(1 - alpha, 1)
# check each value of exp(beta1) to see if
# it is in the confidence interval
expbeta1_vals <- c()
for (expbeta1 in expbeta1_grid) {
ll <- 2 * (y1 * log(y1) + y2 * log(y2 / expbeta1) +
(y1 + y2) * log((1 + expbeta1) / (y1 + y2)))
if (ll <= rhs) {
expbeta1_vals <- c(expbeta1_vals, expbeta1)
}
}
ci <- c(min(expbeta1_vals), max(expbeta1_vals))
return(as.vector(ci))
}
# numeric, numeric, numeric -> vector
# produces score test-based level-alpha confidence interval for
# exp(beta1) given y1 and y2
get_ci_score <- function(y1, y2, alpha) {
# check for edge case of y1 = 0 or y2 = 0
if (y1 == 0 | y2 == 0) {
return(as.vector(c(-Inf, Inf)))
}
q = qchisq(1 - alpha, 1)
# compute the lower and upper bounds of the confidence interval
a = y1^2
b = -(q*(y1+y2) + 2*y1*y2)
c = y2^2
ci = c((-b - sqrt(b^2 - 4*a*c)) / (2*a),
(-b + sqrt(b^2 - 4*a*c)) / (2*a))
return(as.vector(ci))
}
######################################################################
y1 <- 60
y2 <- 90
alpha <- 0.05
ci_score <- get_ci_score(y1, y2, alpha)
print(paste0("Score CI: [", ci_score[1], ", ", ci_score[2], "]"))
print(paste0("Score CI: [", round(ci_score[1],3),
", ", round(ci_score[2],2), "]"))
# load tidyr and suppress messages
suppressMessages({
library(tidyverse)
library(kableExtra)
library(gt)
})
# types of data
types <- c("histone_with_detectability_correction", "histone_no_detectability_correction", "tpa_with_detectability_correction", "tpa_no_detectability_correction")
# define an empty named list for storing data
data <- setNames(vector("list", length(types)), types)
# load data
for (t in types){
data[[t]] <- read.table(paste0(t, ".tsv"), sep = '\t', header = TRUE)
}
colnames(data[[types[1]]])
# keep only the columns that are needed
for (t in types){
data[[t]] <- data[[t]][, c(20, 19, 16, 15, 13, 8, 5)] |>
as_tibble()
}
colnames(data[[types[1]]])
# rename the columns
for (t in types){
colnames(data[[t]]) <- c("gene", "protein", "conc_nM", "copy_number", "mw_Da", "unique_peptides", "quant_accuracy")
}
# avagadro's number
N_A <- 6.022e23
for (t in types){
data[[t]] <- data[[t]] |>
# add column for protein amount in picograms/cell
mutate(amount_pg_per_cell = (copy_number*mw_Da*1e12)/N_A)
}
for (t in types){
cat(paste0(t, ": \n"))
# print total number of protein molecules per cell
total_protein_molecules_per_cell <- sum(data[[t]]$copy_number)
cat(paste0("Number of molecules per cell: ", total_protein_molecules_per_cell,"\n"))
# print total protein amount per cell
total_protein_amount_per_cell <- sum(data[[t]]$amount_pg_per_cell)
cat(paste0("Total protein amount per cell (pg): ", total_protein_amount_per_cell,"\n"))
# print cell volume
# Assumption from Perseus: Total cellular protein concentration is 200 g/l = 200 pg/pl
cell_volume <- total_protein_amount_per_cell / 200
cat(paste0("Cell volume (pL): ", cell_volume,"\n","\n"))
}
# proteins of interest
# PTK2: gene name for focal adhesion kinase 1
# PI3K: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3937771/ suggests Class I type for PI(4,5)P2 to PI(3,4,5)P3. For class I, subunits of interest are PIK3C{A,B,D,G}, PIK3R{1,2,3,5,6}
# dataset only has PIK3CA, PIK3CB, PIK3R1, and PIK3R2
# PDPK1: 3-phosphoinositide-dependent protein kinase 1 (as PDPK1;PDPK2P in gene name column)
# (PDPK1 also has alias name PDK1: not to be confused with [Pyruvate dehydrogenase (acetyl-transferring)] kinase isozyme 1)
# Another name for Rabin8: RAB3IP
# Akt1 or Akt2 or both: mostly like just add them up to get Akt
# Maybe just go ahead with Rab8A, considering the following line in NCB paper
# "Short hairpin RNAs (shRNAs) for human Rab8a (target sequence: AACAAGT- GTGATGTGAATGAC)"
# Rab8 GAP: TBC1D4, TBC1D20, TBC1D17
proteins_of_interest <- c("PTK2", "PIK3CA", "PIK3CB", "PIK3R1", "PIK3R2", "PDPK1;PDPK2P",
"PTEN", "AKT1", "AKT2", "RAB3IP", "RAB8A", "RAB8B",
"TBC1D4", "TBC1D20", "TBC1D17")
data_filtered <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene","conc_nM","copy_number","quant_accuracy","unique_peptides"))) |>
mutate(conc_0.1pl = 10^21 * copy_number/(0.1*N_A)) |>
mutate(conc_0.5pl = 10^21 * copy_number/(0.5*N_A)) |>
mutate(conc_1pl = 10^21 * copy_number/(N_A)) |>
mutate(conc_5pl = 10^21 * copy_number/(5*N_A)) |>
mutate(conc_10pl = 10^21 * copy_number/(10*N_A))
# keeping only the proteins of interest, and copy_number and amount_pg_per_cell columns
# output data[[1]] using kable
temp <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene", "copy_number", "amount_pg_per_cell")))
# load excel file with specific sheet named "proteinGroups" and don't show warnings
data_other_cell_lines <- readxl::read_excel("proteome_ruler_paper_SuppTab2.xlsx",
sheet = "proteinGroups") |>
as_tibble()
# keep only the columns with subscript "Copy number" or "Gene names" in their name
cols_to_keep <- grep("Copy number|Gene names", colnames(data_other_cell_lines), value = TRUE)
data_other_cell_lines <- data_other_cell_lines |>
select(all_of(cols_to_keep))
# remove substring "Copy number" from column names that have it
colnames(data_other_cell_lines)[1:12] <- gsub("Copy number ", "",
colnames(data_other_cell_lines)[1:12])
colnames(data_other_cell_lines)[13] <- "gene"
# keep only the proteins of interest
data_other_cell_lines <- data_other_cell_lines |>
filter(gene %in% proteins_of_interest) |>
column_to_rownames(var = "gene") |>
# mutate all the columns to numeric
mutate(across(everything(), as.numeric)) |>
# mutate all columns by dividing by N_A
# assuming 1pL cell volume and converting to nM
mutate(across(everything(), ~ ./(N_A*1e-21))) |>
rownames_to_column(var = "gene")
compare_cell_lines <- data_filtered |>
select(all_of(c("gene", "conc_1pl"))) |>
inner_join(data_other_cell_lines, by = "gene") |>
# round off all the numerics to 2 decimal places
mutate(across(where(is.numeric), ~ round(., 2)))
View(data_filtered)
View(data[[1]])
# proteins of interest
# PTK2: gene name for focal adhesion kinase 1
# PI3K: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3937771/ suggests Class I type for PI(4,5)P2 to PI(3,4,5)P3. For class I, subunits of interest are PIK3C{A,B,D,G}, PIK3R{1,2,3,5,6}
# dataset only has PIK3CA, PIK3CB, PIK3R1, and PIK3R2
# PDPK1: 3-phosphoinositide-dependent protein kinase 1 (as PDPK1;PDPK2P in gene name column)
# (PDPK1 also has alias name PDK1: not to be confused with [Pyruvate dehydrogenase (acetyl-transferring)] kinase isozyme 1)
# Another name for Rabin8: RAB3IP
# Akt1 or Akt2 or both: mostly like just add them up to get Akt
# Maybe just go ahead with Rab8A, considering the following line in NCB paper
# "Short hairpin RNAs (shRNAs) for human Rab8a (target sequence: AACAAGT- GTGATGTGAATGAC)"
# Rab8 GAP: TBC1D4, TBC1D20, TBC1D17
# PPP2CA: Akt Phosphatase PP2A
proteins_of_interest <- c("PTK2", "PIK3CA", "PIK3CB", "PIK3R1", "PIK3R2", "PDPK1;PDPK2P",
"PTEN", "AKT1", "AKT2", "RAB3IP", "RAB8A", "RAB8B",
"TBC1D4", "TBC1D20", "TBC1D17", "PPP2CA")
data_filtered <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene","conc_nM","copy_number","quant_accuracy","unique_peptides"))) |>
mutate(conc_0.1pl = 10^21 * copy_number/(0.1*N_A)) |>
mutate(conc_0.5pl = 10^21 * copy_number/(0.5*N_A)) |>
mutate(conc_1pl = 10^21 * copy_number/(N_A)) |>
mutate(conc_5pl = 10^21 * copy_number/(5*N_A)) |>
mutate(conc_10pl = 10^21 * copy_number/(10*N_A))
# keeping only the proteins of interest, and copy_number and amount_pg_per_cell columns
# output data[[1]] using kable
temp <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene", "copy_number", "amount_pg_per_cell")))
# load excel file with specific sheet named "proteinGroups" and don't show warnings
data_other_cell_lines <- readxl::read_excel("proteome_ruler_paper_SuppTab2.xlsx",
sheet = "proteinGroups") |>
as_tibble()
# keep only the columns with subscript "Copy number" or "Gene names" in their name
cols_to_keep <- grep("Copy number|Gene names", colnames(data_other_cell_lines), value = TRUE)
data_other_cell_lines <- data_other_cell_lines |>
select(all_of(cols_to_keep))
# remove substring "Copy number" from column names that have it
colnames(data_other_cell_lines)[1:12] <- gsub("Copy number ", "",
colnames(data_other_cell_lines)[1:12])
colnames(data_other_cell_lines)[13] <- "gene"
# keep only the proteins of interest
data_other_cell_lines <- data_other_cell_lines |>
filter(gene %in% proteins_of_interest) |>
column_to_rownames(var = "gene") |>
# mutate all the columns to numeric
mutate(across(everything(), as.numeric)) |>
# mutate all columns by dividing by N_A
# assuming 1pL cell volume and converting to nM
mutate(across(everything(), ~ ./(N_A*1e-21))) |>
rownames_to_column(var = "gene")
compare_cell_lines <- data_filtered |>
select(all_of(c("gene", "conc_1pl"))) |>
inner_join(data_other_cell_lines, by = "gene") |>
# round off all the numerics to 2 decimal places
mutate(across(where(is.numeric), ~ round(., 2)))
View(compare_cell_lines)
View(data_other_cell_lines)
# load excel file with specific sheet named "proteinGroups" and don't show warnings
data_other_cell_lines <- readxl::read_excel("proteome_ruler_paper_SuppTab2.xlsx",
sheet = "proteinGroups") |>
as_tibble()
View(data_other_cell_lines)
# PI3K: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3937771/ suggests Class I type for PI(4,5)P2 to PI(3,4,5)P3. For class I, subunits of interest are PIK3C{A,B,D,G}, PIK3R{1,2,3,5,6}
# dataset only has PIK3CA, PIK3CB, PIK3R1, and PIK3R2
# PDPK1: 3-phosphoinositide-dependent protein kinase 1 (as PDPK1;PDPK2P in gene name column)
# (PDPK1 also has alias name PDK1: not to be confused with [Pyruvate dehydrogenase (acetyl-transferring)] kinase isozyme 1)
# Another name for Rabin8: RAB3IP
# Akt1 or Akt2 or both: mostly like just add them up to get Akt
# Maybe just go ahead with Rab8A, considering the following line in NCB paper
# "Short hairpin RNAs (shRNAs) for human Rab8a (target sequence: AACAAGT- GTGATGTGAATGAC)"
# Rab8 GAP: TBC1D4, TBC1D20, TBC1D17
# PPP2CA: Akt Phosphatase PP2A
proteins_of_interest <- c("PTK2", "PIK3CA", "PIK3CB", "PIK3R1", "PIK3R2", "PDPK1;PDPK2P",
"PTEN", "AKT1", "AKT2", "RAB3IP", "RAB8A", "RAB8B",
"TBC1D4", "TBC1D20", "TBC1D17", "PPP2CA", "PPP2CA;PPP2CB")
data_filtered <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene","conc_nM","copy_number","quant_accuracy","unique_peptides"))) |>
mutate(conc_0.1pl = 10^21 * copy_number/(0.1*N_A)) |>
mutate(conc_0.5pl = 10^21 * copy_number/(0.5*N_A)) |>
mutate(conc_1pl = 10^21 * copy_number/(N_A)) |>
mutate(conc_5pl = 10^21 * copy_number/(5*N_A)) |>
mutate(conc_10pl = 10^21 * copy_number/(10*N_A))
# proteins of interest
# PTK2: gene name for focal adhesion kinase 1
# PI3K: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3937771/ suggests Class I type for PI(4,5)P2 to PI(3,4,5)P3. For class I, subunits of interest are PIK3C{A,B,D,G}, PIK3R{1,2,3,5,6}
# dataset only has PIK3CA, PIK3CB, PIK3R1, and PIK3R2
# PDPK1: 3-phosphoinositide-dependent protein kinase 1 (as PDPK1;PDPK2P in gene name column)
# (PDPK1 also has alias name PDK1: not to be confused with [Pyruvate dehydrogenase (acetyl-transferring)] kinase isozyme 1)
# Another name for Rabin8: RAB3IP
# Akt1 or Akt2 or both: mostly like just add them up to get Akt
# Maybe just go ahead with Rab8A, considering the following line in NCB paper
# "Short hairpin RNAs (shRNAs) for human Rab8a (target sequence: AACAAGT- GTGATGTGAATGAC)"
# Rab8 GAP: TBC1D4, TBC1D20, TBC1D17
# PPP2CA: Akt Phosphatase PP2A
proteins_of_interest <- c("PTK2", "PIK3CA", "PIK3CB", "PIK3R1", "PIK3R2", "PDPK1;PDPK2P",
"PTEN", "AKT1", "AKT2", "RAB3IP", "RAB8A", "RAB8B",
"TBC1D4", "TBC1D20", "TBC1D17", "PPP2CA", "PPP2CA;PPP2CB")
data_filtered <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene","conc_nM","copy_number","quant_accuracy","unique_peptides"))) |>
mutate(conc_0.1pl = 10^21 * copy_number/(0.1*N_A)) |>
mutate(conc_0.5pl = 10^21 * copy_number/(0.5*N_A)) |>
mutate(conc_1pl = 10^21 * copy_number/(N_A)) |>
mutate(conc_5pl = 10^21 * copy_number/(5*N_A)) |>
mutate(conc_10pl = 10^21 * copy_number/(10*N_A))
# keeping only the proteins of interest, and copy_number and amount_pg_per_cell columns
# output data[[1]] using kable
temp <- data[["histone_with_detectability_correction"]] |>
filter(gene %in% proteins_of_interest) |>
select(all_of(c("gene", "copy_number", "amount_pg_per_cell")))
# load excel file with specific sheet named "proteinGroups" and don't show warnings
data_other_cell_lines <- readxl::read_excel("proteome_ruler_paper_SuppTab2.xlsx",
sheet = "proteinGroups") |>
as_tibble()
# keep only the columns with subscript "Copy number" or "Gene names" in their name
cols_to_keep <- grep("Copy number|Gene names", colnames(data_other_cell_lines), value = TRUE)
data_other_cell_lines <- data_other_cell_lines |>
select(all_of(cols_to_keep))
# remove substring "Copy number" from column names that have it
colnames(data_other_cell_lines)[1:12] <- gsub("Copy number ", "",
colnames(data_other_cell_lines)[1:12])
colnames(data_other_cell_lines)[13] <- "gene"
# keep only the proteins of interest
data_other_cell_lines <- data_other_cell_lines |>
filter(gene %in% proteins_of_interest) |>
column_to_rownames(var = "gene") |>
# mutate all the columns to numeric
mutate(across(everything(), as.numeric)) |>
# mutate all columns by dividing by N_A
# assuming 1pL cell volume and converting to nM
mutate(across(everything(), ~ ./(N_A*1e-21))) |>
rownames_to_column(var = "gene")
View(data_other_cell_lines)
View(data_filtered)
# load excel file with specific sheet named "proteinGroups" and don't show warnings
data_other_cell_lines <- readxl::read_excel("proteome_ruler_paper_SuppTab2.xlsx",
sheet = "proteinGroups") |>
as_tibble()
View(data_other_cell_lines)
View(data[[1]])
View(data_filtered)
package_version("TIDYVERSE")
package_version("tidyverse")
packageVersion("tidyverse")
?packageVersion
packageVersion("foreach","doParallel")
packageVersion("foreach")
packageVersion("doParallel")
packageVersion("RColorBrewer")
packageVersion("ComplexHeatmap")
packageVersion("circlize")
packageVersion("ggsignif")
packageVersion("cowplot")
packageVersion("ConsensusClusterPlus")
packageVersion("fpc")
?density
?logit
library(pracma)
?logit
packageVersion("pracma")
?ecdfdist
library(maotai)
?ecdfdist
packageVersion("maotai")
?fsdist
?ksdist
library(geostats)
?ksdist
packageVersion("geostats")
packageVersion("corrplot")
packageVersion("Hmisc")
packageVersion("kableExtra")
packageVersion("patchwork")
packageVersion("plotrix")
version()
version
# Aim: To plot rough ECDFs used in schematic in Figure 4A
# load packages -------
suppressPackageStartupMessages({
library(tidyverse)
})
# Aim: Count the number of measurements for each physical feature for each of the
# cell line-substrate pairs
# load the packages -------
suppressPackageStartupMessages({
library(tidyverse)
library(kableExtra)
})
# set the working directory as the location of the script -------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# global parameters -------
features <- c(
"area", "circularity", "aspect_ratio",
"cell_stiffness", "motility"
)
cell.line.names <- read.csv("../Figures/cell_line_label_colors.csv",
stringsAsFactors = FALSE
) %>%
select(cl_id, label)
subs <- c(
"500Pa Coll", "500Pa FN",
"30kPa Coll", "30kPa FN",
"HA Coll", "HA FN",
"Glass"
)
# load the data --------
# define an empty named list for storing data
data <- setNames(vector("list", length(features)), features)
for (f in features) {
data[[f]] <- read_tsv(paste("../data/", f, ".tsv", sep = ""),
show_col_types = FALSE
) %>% as_tibble()
colnames(data[[f]]) <- c("cl_id", "sub_id", "feature_value")
data[[f]] <- data[[f]] %>%
mutate_at(c("cl_id", "sub_id"), as.factor)
}
# Count the number of measurements -----
counts <- setNames(vector("list", length(features)), features)
for (f in features) {
counts[[f]] <- data[[f]] %>%
group_by(cl_id, sub_id) %>%
summarise(n = n()) %>%
ungroup() %>%
# pivot to wider
pivot_wider(names_from = sub_id, values_from = n) %>%
# join with cell.line.names to get the cell line labels
left_join(cell.line.names, by = "cl_id") %>%
# make cl_id factor with levels in the order of cell.line.names
mutate(cl_id = factor(cl_id, levels = cell.line.names$cl_id)) %>%
arrange(cl_id) %>%
select(-cl_id) %>%
# make cl_id to rownames
column_to_rownames(var = "label")
}
# Compare the counts for area, aspect ratio, and circularity ----
# expect them to be the same for all cell line-substrate pairs
if (sum(counts[["area"]] != counts[["aspect_ratio"]]) != 0 |
sum(counts[["area"]] != counts[["circularity"]]) != 0) {
message("The counts for area, aspect ratio, and circularity are NOT same for all cell line-substrate pairs")
} else {
message("The counts for area, aspect ratio, and circularity are same for all cell line-substrate pairs")
}
# save the counts as a latex table -------
for (f in c("area", "cell_stiffness", "motility")) {
if (f == "area") {
temp <- "Number of spread area, aspect ratio, and circularity measurements for each cell line-substrate combination."
} else if (f == "cell_stiffness") {
temp <- "Number of cell stiffness measurements for each cell line-substrate combination."
} else if (f == "motility") {
temp <- "Number of cell speed measurements for each cell line-substrate combination."
}
# change NA to 0
counts[[f]][is.na(counts[[f]])] <- 0
# order the columns
counts[[f]] <- counts[[f]][, c(
"500Pa Coll", "500Pa FN",
"30kPa Coll", "30kPa FN",
"HA Coll", "HA FN",
"Glass"
)]
# Change 500Pa and 30kPa to 500 Pa and 30 kPa
colnames(counts[[f]]) <- gsub("500Pa", "500 Pa", colnames(counts[[f]]))
colnames(counts[[f]]) <- gsub("30kPa", "30 kPa", colnames(counts[[f]]))
counts[[f]] |>
kable(
format = "latex",
align = "c",
# caption differs based on feature, so can't define here
caption = temp,
label = paste0("count-", f),
booktabs = TRUE,
linesep = "",
escape = FALSE
) |>
kable_styling(latex_options = "hold_position") |>
save_kable(paste0("supplementary_table_", f, ".tex"))
}
styler:::style_active_file()
